//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Animation/CatInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CatInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CatInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CatInputActions"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""7fcc92f0-640c-45da-be4a-75197d69c17e"",
            ""actions"": [
                {
                    ""name"": ""Newaction"",
                    ""type"": ""Value"",
                    ""id"": ""5f6842ec-2018-485a-971c-d56486eada46"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Move"",
                    ""id"": ""19a8ad5b-51eb-4f84-8f27-3b2a75561a30"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Newaction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""11bb9446-0dee-4a55-89c2-f2c31c31d2e7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Newaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""913fd9c1-8497-40af-9985-2d1eeba4a7b6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Newaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""28ca723f-13e7-41d7-be4a-62e5fe16c0d6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Newaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""97474af2-5ffb-4791-9c45-bdafe424d7e4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Newaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Jump"",
            ""id"": ""9462d987-8a79-42f8-90f8-233bdf6d7bb0"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""41931dee-f4e5-44e3-9d3f-b070f2eb0742"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f0bd918e-7610-4df0-bffb-5594f9b56d21"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Attack"",
            ""id"": ""c9417d3b-5178-4935-bfc6-13a3ef6d619f"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""05742517-bc2d-439e-b5f4-6eb64966a9d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""27657107-cd5d-4f9f-966d-2a0cdbca4ff3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FuryMode"",
            ""id"": ""6d817b66-affe-44e0-a258-d2394708cbfd"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""4eb13131-5928-4fc0-be3f-a60a6c6f3564"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0abcfc33-1955-4ee2-8e51-15b0c8a6f935"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Run"",
            ""id"": ""4966aee0-22a2-452c-ac2a-f2570b5ed356"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""ea84475a-71f5-4d74-9a85-bbe4e427c3b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd0bc611-80ec-4d70-851c-9a15237e2c62"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_Newaction = m_Move.FindAction("Newaction", throwIfNotFound: true);
        // Jump
        m_Jump = asset.FindActionMap("Jump", throwIfNotFound: true);
        m_Jump_Newaction = m_Jump.FindAction("New action", throwIfNotFound: true);
        // Attack
        m_Attack = asset.FindActionMap("Attack", throwIfNotFound: true);
        m_Attack_Newaction = m_Attack.FindAction("New action", throwIfNotFound: true);
        // FuryMode
        m_FuryMode = asset.FindActionMap("FuryMode", throwIfNotFound: true);
        m_FuryMode_Newaction = m_FuryMode.FindAction("New action", throwIfNotFound: true);
        // Run
        m_Run = asset.FindActionMap("Run", throwIfNotFound: true);
        m_Run_Newaction = m_Run.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private IMoveActions m_MoveActionsCallbackInterface;
    private readonly InputAction m_Move_Newaction;
    public struct MoveActions
    {
        private @CatInputActions m_Wrapper;
        public MoveActions(@CatInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Move_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // Jump
    private readonly InputActionMap m_Jump;
    private IJumpActions m_JumpActionsCallbackInterface;
    private readonly InputAction m_Jump_Newaction;
    public struct JumpActions
    {
        private @CatInputActions m_Wrapper;
        public JumpActions(@CatInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Jump_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Jump; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JumpActions set) { return set.Get(); }
        public void SetCallbacks(IJumpActions instance)
        {
            if (m_Wrapper.m_JumpActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_JumpActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_JumpActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_JumpActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_JumpActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public JumpActions @Jump => new JumpActions(this);

    // Attack
    private readonly InputActionMap m_Attack;
    private IAttackActions m_AttackActionsCallbackInterface;
    private readonly InputAction m_Attack_Newaction;
    public struct AttackActions
    {
        private @CatInputActions m_Wrapper;
        public AttackActions(@CatInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Attack_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Attack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackActions set) { return set.Get(); }
        public void SetCallbacks(IAttackActions instance)
        {
            if (m_Wrapper.m_AttackActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_AttackActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_AttackActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_AttackActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_AttackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public AttackActions @Attack => new AttackActions(this);

    // FuryMode
    private readonly InputActionMap m_FuryMode;
    private IFuryModeActions m_FuryModeActionsCallbackInterface;
    private readonly InputAction m_FuryMode_Newaction;
    public struct FuryModeActions
    {
        private @CatInputActions m_Wrapper;
        public FuryModeActions(@CatInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_FuryMode_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_FuryMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FuryModeActions set) { return set.Get(); }
        public void SetCallbacks(IFuryModeActions instance)
        {
            if (m_Wrapper.m_FuryModeActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_FuryModeActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_FuryModeActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_FuryModeActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_FuryModeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public FuryModeActions @FuryMode => new FuryModeActions(this);

    // Run
    private readonly InputActionMap m_Run;
    private IRunActions m_RunActionsCallbackInterface;
    private readonly InputAction m_Run_Newaction;
    public struct RunActions
    {
        private @CatInputActions m_Wrapper;
        public RunActions(@CatInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Run_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Run; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RunActions set) { return set.Get(); }
        public void SetCallbacks(IRunActions instance)
        {
            if (m_Wrapper.m_RunActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_RunActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_RunActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_RunActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_RunActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public RunActions @Run => new RunActions(this);
    public interface IMoveActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IJumpActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IAttackActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IFuryModeActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IRunActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
